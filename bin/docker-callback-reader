#!/bin/bash
#
# This script is run as a cron job within an account in the docker group.  It
# is used to accept requests from a housekeeping container within an application
# and to pass these to over containers within the same application.
#
# It creates and listens to a pipe ${CALL_BACK_DIR}/call-back.pipe, and receives
# commands of the form <app> <service> <args> where <app>_<service>
# is a valid docker container.  This script detaches:
#
#     docker exec <app>_<service> docker-service-callback.sh <args>
#
# hence the receiving container must include a valid callback_request script
# on its path, and which is able to process and dispatch such a request.
#
# This callback service muct be enabled within a container by volume mapping
# this pipe into the requesting container, e.g.
#
#     volumes:
#       - ${CALL_BACK_DIR}:/run/host-callback
#
# Attempt to lock the LOGFILE. Exit the script if already locked and running.
#
LOGFILE=/tmp/$(basename $0).log
LOCKFILE=/tmp/$(basename $0).lock
(
    flock -n 10 || exit 1
    echo "$(date -Iseconds) Entering Poll on Application Pipe"
    cd $(dirname $(dirname $(realpath $0)))
    . .env  # Execute env context to get CALL_BACK_DIR
    PIPE=${CALL_BACK_DIR}/call-back.pipe
    trap "sudo rm -f $PIPE; flock -u 1" EXIT
    [[ -p $PIPE ]] || ( sudo mkfifo -m 660 $PIPE; sudo chown $USER:docker $PIPE )

    declare app service args
    while true; do
      read app service args < $PIPE
      status=$(docker inspect -f '{{.State.Status}}' ${app}_${service} 2>/dev/null)
      if [ "$status" == "running" ]; then
	echo "$(date -Iseconds) ${app}_${service} ${args}"
        docker exec -d ${app}_${service} docker-service-callback.sh ${args}
      fi
    done
) >> $LOGFILE 2>&1 10>$LOCKFILE
